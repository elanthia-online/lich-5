# ------------------------------------------------------------------------------
# RSpec CI: required-check-safe preflight
#
# Purpose
# - Keep the RSpec check present and green for branch protection on every push/PR,
#   while skipping the heavy Ruby setup and test run when a change only touches
#   docs/meta files that cannot affect tests.
#
# What changed
# - Added a cheap "preflight" step that inspects changed files and sets
#   steps.preflight.outputs.should_test to 'true' or 'false'.
# - The expensive steps (checkout, setup-ruby, rspec) now run only when
#   should_test == 'true'. Otherwise, a short noop step runs so the workflow
#   still completes successfully and satisfies required checks.
#
# How preflight decides
# - For pull_request: lists changed files via pulls.listFiles.
# - For push: compares commits between before and the new SHA.
# - It classifies paths against a small ignore set:
#     .github/workflows/**
#     .github/actions/**
#     .gitattributes
#     .gitignore
#     .rubocop.yml
#     .ruby-version
#     netlify.toml
#     README.adoc
#     release-please-config.json
#     release-please-config.prerelease.json
# - If ANY non-ignored file changed, should_test = true.
# - If it cannot determine the file list (API edge cases), it defaults to
#   should_test = true for safety.
#
# Intentional non-ignores (always trigger tests when changed)
# - spec/**            (test edits must be validated by CI)
# - Gemfile, Gemfile.lock (dependency changes can affect runtime behavior)
#
# Operational effects
# - Docs/meta-only PRs finish fast with a clear "skipped" message.
# - Test-only or dependency-only PRs still run the full RSpec job.
# - No trigger conditions were changed; the workflow still starts on the same
#   push/PR events so required checks remain intact.
#
# Maintenance
# - To adjust what is considered "meta-only", edit the IGNORES array in the
#   preflight script. Be conservative: do not add app code paths here.
# ------------------------------------------------------------------------------
name: RSpec Tests
on: 
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby: ['3.4']
    name: Run tests on Ruby ${{ matrix.ruby }}
    steps:
      - name: Classify changed files (preflight)
        id: preflight
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const ev    = context.eventName;
            // Tier-1 ignores for tests (no spec/**, no Gemfiles)
            const IGNORES = [
              '.github/workflows/**',
              '.github/actions/**',
              '.gitattributes',
              '.gitignore',
              '.rubocop.yml',
              '.ruby-version',
              'netlify.toml',
              'README.adoc',
              'release-please-config.json',
              'release-please-config.prerelease.json',
            ];
            function isIgnored(path) {
              // basic /** suffix handling + exact matches
              return IGNORES.some(p => {
                if (p.endsWith('/**')) {
                  const base = p.slice(0, -3); // remove /**
                  return path.startsWith(base);
                }
                return path === p;
              });
            }
            async function changedFilesForPR(number) {
              const files = await github.paginate(
                github.rest.pulls.listFiles,
                { owner, repo, pull_number: number, per_page: 100 }
              );
              return files.map(f => f.filename);
            }
            async function changedFilesForPush() {
              const before = (context.payload.before || '').trim();
              const head   = context.sha;
              if (!before) return null;
              const cmp = await github.rest.repos.compareCommits({ owner, repo, base: before, head });
              return (cmp.data.files || []).map(f => f.filename);
            }
            let files = null;
            if (ev === 'pull_request') {
              const num = context.payload.pull_request && context.payload.pull_request.number;
              files = num ? await changedFilesForPR(num) : null;
            } else if (ev === 'push') {
              files = await changedFilesForPush();
            }
            if (!files || files.length === 0) {
              core.notice('Preflight: could not determine changed files; defaulting to run tests.');
              core.setOutput('should_test', 'true');
            } else {
              const nonIgnored = files.filter(f => !isIgnored(f));
              const should = nonIgnored.length > 0;
              core.notice(`Preflight: changed files = ${files.length}, non-ignored = ${nonIgnored.length}; should_test=${should}`);
              core.setOutput('should_test', should ? 'true' : 'false');
            }
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        if: steps.preflight.outputs.should_test == 'true'
      - uses: ruby/setup-ruby@d5126b9b3579e429dd52e51e68624dda2e05be25 # v1.267.0
        if: steps.preflight.outputs.should_test == 'true'
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true
      - name: Run RSpec tests
        if: steps.preflight.outputs.should_test == 'true'
        run: bundle exec rspec
      - name: RSpec skipped (docs/meta-only change)
        if: steps.preflight.outputs.should_test != 'true'
        run: echo "Preflight determined only ignored paths changed; skipping RSpec."
